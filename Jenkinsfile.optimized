pipeline {
    agent any
    
    environment {
        APP_NAME = 'automarkly-frontend'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        AWS_REGION = 'ap-south-1'
        TEST_EMAIL = 'sara.beck.dev@gmail.com'
        
        // S3 and CloudFront - from Jenkins Credentials
        S3_BUCKET = credentials('s3-static-bucket')
        CLOUDFRONT_DISTRIBUTION_ID = credentials('cloudfront-distribution-id')
        CLOUDFRONT_DOMAIN = credentials('cloudfront-domain')
    }
    
    triggers {
        githubPush()
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Parallel Quality Checks') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh '''
                            # Cache npm dependencies
                            if [ -d "node_modules" ]; then
                                echo "Using cached node_modules"
                            else
                                npm ci
                            fi
                            
                            # Run tests with coverage
                            npm run test:ci || true
                            
                            # Archive results even if tests fail
                            mkdir -p test-results coverage
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'test-results/**/*,coverage/**/*', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Lint') {
                    steps {
                        sh '''
                            # Quick lint check
                            npx eslint src/ --max-warnings=0 || true
                        '''
                    }
                }
            }
        }
        
        stage('Build Static Files') {
            steps {
                script {
                    // Use Docker build cache effectively
                    sh '''
                        # Build with cache
                        docker build \
                            --cache-from automarkly-frontend:latest \
                            --target artifacts \
                            -t automarkly-frontend:artifacts-${BUILD_NUMBER} \
                            -t automarkly-frontend:latest \
                            .
                        
                        # Extract build artifacts efficiently
                        CONTAINER_ID=$(docker create automarkly-frontend:artifacts-${BUILD_NUMBER})
                        
                        # Clean previous build
                        rm -rf build
                        
                        # Copy artifacts
                        docker cp ${CONTAINER_ID}:/build ./build
                        
                        # Cleanup container
                        docker rm ${CONTAINER_ID}
                        
                        # Verify build
                        if [ ! -d "build/static" ]; then
                            echo "‚ùå Build failed - no static files"
                            exit 1
                        fi
                        
                        echo "‚úÖ Build completed: $(du -sh build | cut -f1) of files"
                    '''
                }
            }
            post {
                success {
                    sh 'echo "Build artifacts ready for deployment"'
                }
            }
        }
        
        stage('Deploy to S3') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Smart S3 sync with proper cache headers
                    sh '''
                        echo "üì¶ Deploying to S3..."
                        
                        # Static assets (JS, CSS, images) - cache forever
                        aws s3 sync build/static/ s3://${S3_BUCKET}/static/ \
                            --cache-control "public,max-age=31536000,immutable" \
                            --metadata-directive REPLACE \
                            --delete
                        
                        # HTML files - no cache
                        aws s3 cp build/index.html s3://${S3_BUCKET}/ \
                            --cache-control "no-cache,no-store,must-revalidate" \
                            --content-type "text/html"
                        
                        # Other root files
                        aws s3 sync build/ s3://${S3_BUCKET}/ \
                            --exclude "static/*" \
                            --exclude "index.html" \
                            --cache-control "public,max-age=3600" \
                            --delete
                        
                        echo "‚úÖ S3 deployment completed"
                    '''
                }
            }
        }
        
        stage('CloudFront Invalidation') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Smart invalidation - only what changed
                    sh '''
                        echo "üîÑ CloudFront cache invalidation..."
                        
                        # Check if distribution exists
                        if aws cloudfront get-distribution --id ${CLOUDFRONT_DISTRIBUTION_ID} 2>/dev/null; then
                            # Create invalidation for HTML only (static files use versioning)
                            INVALIDATION_ID=$(aws cloudfront create-invalidation \
                                --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} \
                                --paths "/index.html" "/*.json" \
                                --query 'Invalidation.Id' \
                                --output text)
                            
                            echo "Invalidation ID: $INVALIDATION_ID"
                            
                            # Don't wait - let it happen async
                            echo "‚úÖ Invalidation started (running in background)"
                        else
                            echo "‚ö†Ô∏è CloudFront distribution not found - skipping invalidation"
                        fi
                    '''
                }
            }
        }
        
        stage('Smoke Tests') {
            when {
                branch 'main'
            }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    sh '''
                        echo "üß™ Running smoke tests..."
                        
                        # Test S3 direct access
                        DIRECT_URL="https://${S3_BUCKET}.s3.${AWS_REGION}.amazonaws.com/index.html"
                        if curl -f -s -o /dev/null -w "%{http_code}" "$DIRECT_URL" | grep -q "200\|403"; then
                            echo "‚úÖ S3 upload verified"
                        else
                            echo "‚ùå S3 upload failed"
                            exit 1
                        fi
                        
                        # Test CloudFront if available
                        if [ ! -z "${CLOUDFRONT_DOMAIN}" ]; then
                            CF_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${CLOUDFRONT_DOMAIN}/")
                            if [ "$CF_STATUS" = "200" ]; then
                                echo "‚úÖ CloudFront serving content"
                            else
                                echo "‚ö†Ô∏è CloudFront not ready yet (status: $CF_STATUS)"
                            fi
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup Docker images
                sh '''
                    docker rmi automarkly-frontend:artifacts-${BUILD_NUMBER} 2>/dev/null || true
                    docker image prune -f 2>/dev/null || true
                '''
                
                // Send notification
                def status = currentBuild.result ?: 'SUCCESS'
                if (status == 'SUCCESS') {
                    echo """
                    ‚úÖ Deployment successful!
                    üåê S3: https://${S3_BUCKET}.s3.${AWS_REGION}.amazonaws.com/
                    ${CLOUDFRONT_DOMAIN ? "üöÄ CDN: https://${CLOUDFRONT_DOMAIN}/" : ""}
                    """
                }
            }
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed - check logs'
        }
    }
}